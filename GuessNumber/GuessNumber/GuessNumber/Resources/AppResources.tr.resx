<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppTitle" xml:space="preserve">
    <value>Rakam tahmin et</value>
  </data>
  <data name="BackToMain" xml:space="preserve">
    <value>Ana menü</value>
  </data>
  <data name="ChoiceNumber" xml:space="preserve">
    <value>4 haneli rakam seç</value>
  </data>
  <data name="D" xml:space="preserve">
    <value>Y</value>
  </data>
  <data name="Del" xml:space="preserve">
    <value>Sil</value>
  </data>
  <data name="Mobile" xml:space="preserve">
    <value>Mobil</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Tamam</value>
  </data>
  <data name="Question" xml:space="preserve">
    <value>????</value>
  </data>
  <data name="Roles" xml:space="preserve">
    <value>Kurallar</value>
  </data>
  <data name="RolesDetails" xml:space="preserve">
    <value>&lt;P style = "font-size= 20"&gt;
    &lt;strong&gt; Giriş: &lt;/strong&gt;
&lt;/ P&gt;
&lt;p&gt; Oyun size, mobil ve oyunculara bağlıdır. Her şeyden önce, herhangi bir 5684, 1657 veya 9641'i tekrarlamadan dört basamaklı bir sayı seçmelisiniz. Sonra bir oyuncu oynamaya başlar ve ilk oyuncu rastgele seçilir. &lt;/p&gt;
&lt;p&gt; Telefon çalmaya başlarsa, dört basamaklı bir sayı seçer ve hücre alanında ekranda görüntüler, ardından ilk aşamada seçtiğiniz numaranızla karşılaştırmasının sonucunu görüntüler ve sonuç aşağıdaki gibi olur: &lt;/p&gt;
&lt;P style = "font-size= 20"&gt;
    &lt;strong&gt; Sonuçlar: &lt;/strong&gt;
&lt;/ P&gt;
&lt;p&gt; 1- Seçtiğiniz ve aynı yerde bulunan dört rakamdan birini içeren dört basamaktan biri varsa, eşleşme anlamına gelen (i) harfi görünecektir. &lt;/p&gt;
&lt;p&gt; 2- Seçtiğiniz dört sayıdan birini içeren dört hücreden biri varsa, ancak başka bir yerde, “T” harfi görünür, yani değiş tokuş. &lt;/p&gt;
&lt;p&gt; 3- Dört basamaktan herhangi birinde bir eşleşme veya değişim olmadığında, bir işaret (-) görünür. &lt;/p&gt;
&lt;p&gt; Rol ikinci oyuncuya aktarılır, bu yüzden tekrarlanırsanız dört basamaklı bir sayı tahmin etmeniz ve ardından Tamam düğmesini tıklamanız gerekir, sayı alanınızda ve sonucun yanında görünür: i veya i veya o ...
&lt;p&gt; Biriniz karşı tarafın numarasını tahmin edene kadar kazanan bu şekilde tekrarlanır. &lt;/p&gt;
&lt;P style = "font-size= 20"&gt;
    &lt;strong&gt; Analiz: &lt;/strong&gt;
&lt;/ P&gt;
&lt;p&gt; Oyun, analiz ve karşılaştırmaya dayanıyor, örneğin, 7896 sayısını ve sonucun görünümünü (-) girerken, diğer tarafın numarası 7896 içermediğinden, başka bir numarayı onaylamadığınız sürece bu sayıları tekrar girmek yanlış demektir. &lt;/p&gt;
&lt;p&gt; Örneğin ... 1234 gibi bir sayının sonucu T ise, yani iki borsa ise, bu dört sayıdan ikisinin doğru olduğu, ancak konumlarının yanlış olduğu anlamına gelir. &lt;/p&gt;
&lt;p&gt; 9056 gibi bir sayının sonucu T i, yani değiş tokuş ve uyuşma ise, bu dört sayıdan ikisinin doğru olduğu, ancak birinin yerinde olduğu ve diğerinin bulunduğu yerden başka bir yerde olduğu anlamına gelir. &lt;/p&gt;
&lt;p&gt; Doğru sayıyı tahmin edene kadar devam edin. &lt;/p&gt;
&lt;P style = "font-size= 20"&gt;
    &lt;strong&gt; Umarım bu uygulama ile faydalı ve keyifli zamanlar geçirirsiniz. Google Play Market'teki uygulamayı değerlendirerek bizi gözden kaçırmayın. &lt;/strong&gt;
&lt;/ P&gt;</value>
  </data>
  <data name="S" xml:space="preserve">
    <value>A</value>
  </data>
  <data name="StartGame" xml:space="preserve">
    <value>Yeni oyun</value>
  </data>
  <data name="You" xml:space="preserve">
    <value>sen</value>
  </data>
  <data name="YouLost" xml:space="preserve">
    <value>üzgünüm, kaybetin.</value>
  </data>
  <data name="YourTurn" xml:space="preserve">
    <value>Senin sıran</value>
  </data>
  <data name="YouWon" xml:space="preserve">
    <value>Tebrekler! Kazandın.</value>
  </data>
</root>