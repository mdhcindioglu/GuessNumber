<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppTitle" xml:space="preserve">
    <value>Guess Number</value>
  </data>
  <data name="BackToMain" xml:space="preserve">
    <value>Back to main screen</value>
  </data>
  <data name="ChoiceNumber" xml:space="preserve">
    <value>Choice number length 4</value>
  </data>
  <data name="D" xml:space="preserve">
    <value>D</value>
  </data>
  <data name="Del" xml:space="preserve">
    <value>Del</value>
  </data>
  <data name="Mobile" xml:space="preserve">
    <value>Mobile</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="Question" xml:space="preserve">
    <value>????</value>
  </data>
  <data name="Roles" xml:space="preserve">
    <value>The roles</value>
  </data>
  <data name="RolesDetails" xml:space="preserve">
    <value>&lt;P style = "text-size = 20"&gt;
    &lt;strong&gt; Introduction: &lt;/strong&gt;
&lt;/P&gt;
&lt;p&gt; The game depends on you, mobile and players. First you have to choose a four-digit number without repeating any 5684, 1657 or 9641. Then one player starts playing and the first player is randomly selected. &lt;/p&gt;
&lt;p&gt; If the phone starts playing, it will select a four-digit number and display it on the screen in the cell field, then display the result of its comparison with your number you chose in the first stage, and the result will be as follows: &lt;/p&gt;
&lt;P style = "text-size = 20"&gt;
    &lt;strong&gt; Results: &lt;/strong&gt;
&lt;/P&gt;
&lt;p&gt; 1- If there is one of the four digits that contain one of the four numbers you have chosen and was in the same place, the letter (i), meaning a match, will appear. &lt;/p&gt;
&lt;p&gt; 2- If there is one of the four cells containing one of the four numbers you chose, but somewhere else, the letter “T” will appear, that is, exchange. &lt;/p&gt;
&lt;p&gt; 3- If there is no match or exchange in any of the four digits, a sign (-) appears. &lt;/p&gt;
&lt;p&gt; The role is transferred to the second player, so if you are, you have to guess a four-digit number that is not repeated, then click the OK button, the number will appear in your field and next to it the result: i or i or o ...
&lt;p&gt; This is how the process is repeated until one of you guesses the other party's number, and so is the winner. &lt;/p&gt;
&lt;P style = "text-size = 20"&gt;
    &lt;strong&gt; Analysis: &lt;/strong&gt;
&lt;/P&gt;
&lt;p&gt; The game depends on analysis and comparison, for example when entering the number 7896 and the appearance of the result (-), this means that the number of the other party does not contain 7896, and therefore it is a mistake to re-enter these numbers except in case of confirmation of another number. &lt;/p&gt;
&lt;p&gt; For example ... if the result of a number like 1234 is T, that is, two exchanges, then this means that two of the four numbers are correct, but their locations are incorrect. &lt;/p&gt;
&lt;p&gt; If the result of a number like 9056 is T i, i.e. exchange and congruence, then this means that two of the four numbers are correct, but one is in its place and the other is in a place other than its location. &lt;/p&gt;
&lt;p&gt; And so on until you guess the correct number. &lt;/p&gt;
&lt;p style = "text-size = 20"&gt;
    &lt;strong&gt; I hope you spend useful and enjoyable times with this app. Do not skimp on us by evaluating the application on the Google Play Market. &lt;/strong&gt;
&lt;/p&gt;</value>
  </data>
  <data name="S" xml:space="preserve">
    <value>S</value>
  </data>
  <data name="StartGame" xml:space="preserve">
    <value>Start new game</value>
  </data>
  <data name="You" xml:space="preserve">
    <value>you</value>
  </data>
  <data name="YouLost" xml:space="preserve">
    <value>Sorry, you lost.</value>
  </data>
  <data name="YourTurn" xml:space="preserve">
    <value>Its your turn</value>
  </data>
  <data name="YouWon" xml:space="preserve">
    <value>Congratulation! you WON!!!</value>
  </data>
</root>